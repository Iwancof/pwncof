import os
import argparse

print("""
    Pwncof template generater
""", file=os.sys.stderr)

parser = argparse.ArgumentParser(description="Pwncof template generater")

parser.add_argument("-o", "--output", help="Output file name", required=False)
parser.add_argument("--binary", help="Binary file name", required=False)
parser.add_argument("--libc", help="Libc file name", required=False)
args = parser.parse_args()

if args.output is None:
    output_file = os.sys.stdout
else:
    with open(args.output, "w") as f:
        output_file = f

if args.binary is None:
    binary_name = "chall"
else:
    binary_name = args.binary

template = ""
template += """#!/usr/bin/env python3
# Generated by pwncof_templater(pwncof_templater/__main__.py)
# ubuntu libc download link: http://security.ubuntu.com/ubuntu/pool/main/g/glibc

"""

template += """from pwn import *
import json
"""

template += f"""binary = ELF('{binary_name}', checksec=True)
binary_rop = ROP(binary)
"""

template += f"""
def exploit():
    io = gdb.debug("{binary_name}", exe="./{binary_name}_dbg")
    pass
"""

template += """context.log_level = 'info'
context.terminal = ['tmux', 'splitw', '-h']
context.arch = 'amd64'
context.os = 'linux'
context.bits = 64
"""

template += """
script = \"\"\"
    noter
    c
\"\"\"
"""

template += """try:
    with open("./note.json", "r") as f:
        address = json.load(f)
except FileNotFoundError:
    warn("address note not found")
"""

if args.libc is not None:
    template += f"""
libc = ELF('{args.libc}', checksec=False)
libc_rop = ROP(libc)
"""


template += """
if __name__ == '__main__':
    exploit()
"""

print(template, file=output_file)
